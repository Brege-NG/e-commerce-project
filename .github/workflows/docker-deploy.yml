name: 🔐 Security & Build Pipeline

on:
  push:
    branches:
      - main

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # 1️⃣ Trivy Scan Job
  trivy-scan:
    name: 🔍 Security scan with Trivy
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy (filesystem scan)
        uses: aquasecurity/trivy-action@0.20.0
        with:
          scan-type: 'fs'
          format: 'table'
          severity: 'CRITICAL,HIGH'
          vuln-type: 'os,library'
          exit-code: '1' # Échoue si vulnérabilités trouvées

  # 2️⃣ SonarQube Scan Job
  sonarqube:
    name: 📊 Code Quality with SonarQube
    runs-on: ubuntu-latest
    needs: trivy-scan # S'exécute après le job Trivy
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: SonarSource/sonarqube-scan-action@v5
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
      - uses: SonarSource/sonarqube-quality-gate-action@v1
        timeout-minutes: 5
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  # 3️⃣ Build & Push Docker Images
  build-and-push:
    name: 🐳 Build & Push Docker Images
    runs-on: ubuntu-latest
    needs: sonarqube # S'exécute après SonarQube
    permissions:
      contents: read
      packages: write
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐳 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🔐 Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 📋 Generate tags
        id: tags
        run: |
          BRANCH_NAME="${{ github.ref_name }}"
          SHORT_SHA=$(echo "${{ github.sha }}" | cut -c1-7)
          echo "branch_name=$BRANCH_NAME" >> $GITHUB_OUTPUT
          echo "short_sha=$SHORT_SHA" >> $GITHUB_OUTPUT
          echo "full_sha=${{ github.sha }}" >> $GITHUB_OUTPUT

          if [[ "$BRANCH_NAME" == "main" ]]; then
            DEV_TAGS="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:dev-latest"
            PROD_TAGS="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest"
          else
            CLEAN_BRANCH_NAME=$(echo "$BRANCH_NAME" | sed 's/\//-/g')
            DEV_TAGS="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:dev-$CLEAN_BRANCH_NAME,${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:dev-sha-$SHORT_SHA"
            PROD_TAGS="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:$CLEAN_BRANCH_NAME,${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:sha-$SHORT_SHA"
          fi

          echo "dev_tags=$DEV_TAGS" >> $GITHUB_OUTPUT
          echo "prod_tags=$PROD_TAGS" >> $GITHUB_OUTPUT

      - name: 📄 Copy .env.devops to .env (for DEV)
        run: cp .env.devops .env

      - name: 🏗️ Build and push DEV Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile-dev
          push: true
          tags: ${{ steps.tags.outputs.dev_tags }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: 📄 Copy .env.devops to .env (for PROD)
        run: cp .env.devops .env

      - name: 🏗️ Build and push PROD Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile-prod
          push: true
          tags: ${{ steps.tags.outputs.prod_tags }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: 📝 Output image info
        run: |
          echo "🐳 Images construites et poussées :"
          echo "Registry: ${{ env.REGISTRY }}"
          echo "Repository: ${{ env.IMAGE_NAME }}"
          echo "DEV Tags: ${{ steps.tags.outputs.dev_tags }}"
          echo "PROD Tags: ${{ steps.tags.outputs.prod_tags }}"
          echo "Branch: ${{ steps.tags.outputs.branch_name }}"
          echo "Commit: ${{ steps.tags.outputs.short_sha }}"
